/**
 *
 * @author vishal
 */
class location {

    int x;
    int y;
    boolean queenPlaced;

    public location() {
        x = 0;
        y = 0;
        queenPlaced = false;
    }

    public void setQueenPlaced() {
        this.queenPlaced = true;
    }

    public void setQueenPlacedFalse() {
        this.queenPlaced = false;
    }

    public boolean getQueenPlaced() {
        return queenPlaced;
    }

    public void setX(int x) {
        this.x = x;
    }

    public void setY(int y) {
        this.y = y;
    }
}

public class QueensProblem {

    public location board[][];
    int queen;
    boolean flag = false;

    public QueensProblem(int n) {
        board = new location[n][n];
        queen = n;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = new location();
            }
        }

    }

    public static void main(String args[]) {
        int boardSize = 8;
        QueensProblem test = new QueensProblem(boardSize);

        test.placeQueen(0, boardSize, 0);
    }

    //method to place queen
    private boolean placeQueen(int col, int size, int queen) {

        if (queen == size) {
            flag = true;
            return false;
        }
        if (col >= size)
            return true;

        for (int i = 0; i < size; i++) {
            if (checkQueen(i, col, size) && flag == false) {
                board[i][col].setQueenPlaced();
                queen++;
                if (placeQueen(col + 1, size, queen)) {
                    board[i][col].setQueenPlacedFalse();
                    queen--;
                }
            }
        }
        return true;
    }

    public boolean checkQueen(int row, int col, int size) {
        for (int i = 0; i < size; i++) {
            if (board[row][i].queenPlaced == true) {
                return false;
            }
        }

        for (int i = 0; i < size; i++) {
            if (board[i][col].queenPlaced == true) {
                return false;
            }
        }

        for (int x = row, y = col; y < size && x < size; y++, x++) {
            if (board[x][y].queenPlaced == true) {
                return false;
            }
        }

        for (int x = row, y = col; y >= 0 && x >= 0; y--, x--) {
            if (board[x][y].queenPlaced == true) {
                return false;
            }
        }

        for (int x = row, y = col; y < size && x >= 0; y++, x--) {
            if (board[x][y].queenPlaced == true) {
                return false;
            }
        }

        for (int x = row, y = col; y >= 0 && x < size; y--, x++) {
            if (board[x][y].queenPlaced == true) {
                return false;
            }
        }

        return true;
    }

    private void printBoard() {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                /*boolean x = */
                String result = (board[i][j].getQueenPlaced()) ? "1" : "0";
                System.out.print(result + " ");
            }
            System.out.println("");
        }
    }
}
